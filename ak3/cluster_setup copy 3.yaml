---
- name: Setup Kubernetes Cluster
  hosts: k3s_cluster
  become: yes
  tasks:
    - name: Update and Upgrade APT
      apt:
        update_cache: yes
        upgrade: yes

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker APT repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        state: present

    - name: Install containerd
      apt:
        name: containerd.io
        state: present

    - name: Start containerd
      systemd:
        name: containerd
        state: started
        enabled: yes

    - name: Create /etc/containerd directory
      file:
        path: /etc/containerd
        state: directory

    - name: Remove existing config.toml
      file:
        path: /etc/containerd/config.toml
        state: absent

    - name: Generate containerd config.toml
      shell: "containerd config default | sudo tee /etc/containerd/config.toml"
      args:
        creates: /etc/containerd/config.toml

    - name: Set SystemdCgroup to true in config.toml
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'

    - name: Enable bridging in sysctl.conf
      replace:
        path: /etc/sysctl.conf
        regexp: '#net.ipv4.ip_forward=1'
        replace: 'net.ipv4.ip_forward=1'

    - name: Create /etc/modules-load.d/k8s.conf and add br_netfilter (bridge net filter(ensures bridging is fully supported))
      lineinfile:
        path: /etc/modules-load.d/k8s.conf
        line: 'br_netfilter'
        create: yes

    - name: Enable bridging in sysctl.conf
      replace:
        path: /etc/modules-load.d/k8s.conf
        regexp: '#net.ipv4.ip_forward=1'
        replace: 'net.ipv4.ip_forward=1'

    - name: Check if swap is enabled
      shell: "swapon --show"
      register: swap_status
      ignore_errors: true

    - name: Disable swap
      shell: "swapoff -a"
      when: swap_status.rc == 0

    - name: Comment swap line from /etc/fstab
      lineinfile:
        path: /etc/fstab
        regexp: '^(.*swap.*)$'
        line: '#\1'
        backrefs: yes
      when: swap_status.rc == 0

    - name: Reboot the server
      reboot:

    - name: Add Kubernetes signing key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add Kubernetes APT repository
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present

    - name: Install Kubernetes packages
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present

    # - name: Disable swap
    #   command: swapoff -a
    #   when: ansible_os_family == "Debian"

    # - name: Remove swap from fstab
    #   lineinfile:
    #     path: /etc/fstab
    #     regexp: '.*swap.*'
    #     state: absent

    - name: Enable bridging
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: yes

    - name: Enable br_netfilter
      modprobe:
        name: br_netfilter
        state: present

    - name: Reboot the server
      reboot:

- name: Initialize Kubernetes Cluster
  hosts: master[0]
  become: yes
  tasks:
    - name: Initialize the cluster
      command: kubeadm init --control-plane-endpoint={{ groups['master'][0] }} --pod-network-cidr=10.244.0.0/16
      when: inventory_hostname == groups['master'][0]

    - name: Create a token and retrieve its hash
      shell: |
        TOKEN=$(kubeadm token create)
        HASH=$(openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //')
        echo "token: $TOKEN" > /tmp/kubeadm_token_hash
        echo "hash: $HASH" >> /tmp/kubeadm_token_hash
      when: inventory_hostname == groups['master'][0]
      register: kubeadm_token_hash

    # - name: Fetch kubeadm_token_hash from master[0]
    #   fetch:
    #     src: /tmp/kubeadm_token_hash
    #     dest: /tmp/kubeadm_token_hash
    #   when: inventory_hostname == groups['master'][0]

    - name: copy kubeadm_token_hash to other nodes
      copy:
        src: /tmp/kubeadm_token_hash
        dest: /tmp/
      delegate_to: "{{ item }}"
      with_items: "{{ groups['k3s_cluster'] }}"

    - name: Copy kube config file to user's home directory
      shell: |
        mkdir -p $HOME/.kube &&
        cp -i /etc/kubernetes/admin.conf $HOME/.kube/config &&
        chown $(id -u):$(id -g) $HOME/.kube/config
      when: inventory_hostname == groups['master'][0]

    - name: Copy kubeadm_token_hash to other nodes
      copy:
        src: /tmp/kubeadm_token_hash
        dest: /tmp/kubeadm_token_hash
      delegate_to: "{{ item }}"
      with_items: "{{ groups['k3s_cluster'] }}"

- name: Join Nodes to Cluster
  hosts: master[1:2]
  become: yes
  tasks:
    - name: Retrieve token and hash
      shell: cat /tmp/kubeadm_token_hash
      register: kubeadm_token_hash

    - name: Join master nodes to cluster
      command: "kubeadm join {{ groups['master'][0] }}:6443 --token {{ kubeadm_token_hash.stdout_lines[0].split(': ')[1] }} --discovery-token-ca-cert-hash {{ kubeadm_token_hash.stdout_lines[1].split(': ')[1] }} --control-plane"
      when: inventory_hostname in groups['master']

- name: Join Worker Nodes to Cluster
  hosts: node
  become: yes
  tasks:
    - name: Retrieve token and hash
      shell: cat /tmp/kubeadm_token_hash
      register: kubeadm_token_hash

    - name: Join worker nodes to cluster
      command: "kubeadm join {{ groups['master'][0] }}:6443 --token {{ kubeadm_token_hash.stdout_lines[0].split(': ')[1] }} --discovery-token-ca-cert-hash {{ kubeadm_token_hash.stdout_lines[1].split(': ')[1] }}"
      when: inventory_hostname in groups['node']

- name: Install Network Plugin
  hosts: master[0]
  become: yes
  tasks:
    - name: Install Flannel
      command: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
      when: inventory_hostname == groups['master'][0]
